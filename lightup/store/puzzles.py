import store.board as board


_easy_7x7 = [
  (2, 1, 0),
  (4, 1, None),
  (1, 2, 2),
  (5, 2, None),
  (3, 3, 3),
  (1, 4, None),
  (5, 4, 2),
  (2, 5, 0),
  (4, 5, None)
]


_hard_7x7 = [
  (2, 0, 1),
  (3, 0, None),
  (1, 1, None),
  (5, 1, 3),
  (6, 2, 2),
  (0, 3, 0),
  (6, 3, 1),
  (0, 4, 1),
  (1, 5, None),
  (5, 5, None),
  (3, 6, 0),
  (4, 6, 1)
]


_easy_10x10 = [
  (0, 0, None),
  (3, 0, None),
  (9, 0, None),
  (7, 1, 0),
  (1, 2, 0),
  (3, 2, 2),
  (3, 3, 1),
  (6, 3, None),
  (7, 3, 2),
  (9, 3, None),
  (0, 6, None),
  (2, 6, 1),
  (3, 6, None),
  (6, 6, None),
  (6, 7, 0),
  (8, 7, 1),
  (2, 8, 0),
  (0, 9, 1),
  (6, 9, None),
  (9, 9, 0)
]


_hard_10x10 = [
  (0, 0, 0),
  (9, 0, 0),
  (3, 1, 1),
  (4, 1, 2),
  (6, 1, None),
  (1, 3, 1),
  (4, 3, 0),
  (8, 3, 0),
  (6, 4, 1),
  (8, 4, 0),
  (1, 5, 1),
  (3, 5, 0),
  (1, 6, 0),
  (5, 6, 1),
  (8, 6, 0),
  (3, 8, None),
  (5, 8, 0),
  (6, 8, 1),
  (0, 9, 1),
  (9, 9, 0),
]


_hard_25x25 = [
  (2, 0, 3),
  (4, 0, None),
  (7, 0, None),
  (12, 0, 2),
  (14, 0, 1),
  (23, 0, 0),
  (0, 1, None),
  (1, 1, None),
  (4, 1, None),
  (5, 1, 2),
  (8, 1, 0),
  (10, 1, None),
  (16, 1, None),
  (19, 1, None),
  (20, 1, None),
  (23, 1, None),
  (4, 2, 0),
  (12, 2, 0),
  (13, 2, None),
  (14, 2, 1),
  (15, 2, None),
  (16, 2, 1),
  (19, 2, None),
  (21, 2, 2),
  (24, 2, None),
  (2, 3, None),
  (11, 3, 0),
  (18, 3, None),
  (19, 3, None),
  (1, 4, 1),
  (4, 4, 1),
  (8, 4, 0),
  (16, 4, 2),
  (19, 4, None),
  (20, 4, 0),
  (22, 4, 0),
  (23, 4, 1),
  (24, 4, None),
  (1, 5, 0),
  (2, 5, None),
  (3, 5, None),
  (4, 5, None),
  (6, 5, None),
  (8, 5, None),
  (10, 5, 1),
  (14, 5, None),
  (17, 5, None),
  (18, 5, 2),
  (23, 5, None),
  (3, 6, 1),
  (5, 6, None),
  (10, 6, None),
  (11, 6, 1),
  (13, 6, 1),
  (15, 6, 0),
  (17, 6, None),
  (19, 6, None),
  (5, 7, None),
  (6, 7, 0),
  (8, 7, None),
  (24, 7, None),
  (1, 8, 0),
  (2, 8, 0),
  (4, 8, 1),
  (10, 8, None),
  (11, 8, None),
  (17, 8, 0),
  (19, 8, 1),
  (20, 8, None),
  (23, 8, 0),
  (2, 9, None),
  (6, 9, 2),
  (9, 9, None),
  (11, 9, 1),
  (15, 9, 1),
  (0, 10, 1),
  (2, 10, 0),
  (5, 10, None),
  (13, 10, 0),
  (16, 10, None),
  (18, 10, None),
  (19, 10, 1),
  (23, 10, 0),
  (2, 11, None),
  (6, 11, None),
  (10, 11, 1),
  (15, 11, None),
  (16, 11, None),
  (18, 11, None),
  (21, 11, 0),
  (0, 12, 2),
  (2, 12, 1),
  (22, 12, None),
  (24, 12, 3),
  (3, 13, None),
  (6, 13, None),
  (8, 13, None),
  (9, 13, 2),
  (14, 13, 0),
  (18, 13, None),
  (22, 13, None),
  (1, 14, None),
  (5, 14, 0),
  (6, 14, None),
  (8, 14, None),
  (11, 14, None),
  (19, 14, None),
  (22, 14, 1),
  (24, 14, None),
  (9, 15, None),
  (13, 15, 2),
  (15, 15, 2),
  (18, 15, None),
  (22, 15, None),
  (1, 16, 1),
  (4, 16, 1),
  (5, 16, None),
  (7, 16, 2),
  (13, 16, None),
  (14, 16, None),
  (20, 16, None),
  (22, 16, None),
  (23, 16, None),
  (0, 17, 1),
  (16, 17, None),
  (18, 17, None),
  (19, 17, 2),
  (5, 18, None),
  (7, 18, 0),
  (9, 18, 2),
  (11, 18, 1),
  (13, 18, 1),
  (14, 18, 0),
  (19, 18, None),
  (21, 18, None),
  (1, 19, 2),
  (6, 19, None),
  (7, 19, None),
  (10, 19, 2),
  (14, 19, None),
  (16, 19, None),
  (18, 19, 0),
  (20, 19, None),
  (21, 19, None),
  (22, 19, 1),
  (23, 19, None),
  (0, 20, None),
  (1, 20, 0),
  (2, 20, 0),
  (4, 20, 0),
  (5, 20, None),
  (8, 20, None),
  (16, 20, None),
  (20, 20, None),
  (23, 20, None),
  (5, 21, None),
  (6, 21, 0),
  (13, 21, 2),
  (22, 21, None),
  (0, 22, 0),
  (3, 22, None),
  (5, 22, None),
  (8, 22, None),
  (9, 22, 1),
  (10, 22, 0),
  (11, 22, 0),
  (12, 22, None),
  (20, 22, None),
  (1, 23, None),
  (4, 23, 1),
  (5, 23, None),
  (8, 23, 0),
  (14, 23, 1),
  (16, 23, 0),
  (19, 23, None),
  (20, 23, None),
  (23, 23, None),
  (24, 23, 2),
  (1, 24, None),
  (10, 24, None),
  (12, 24, None),
  (17, 24, 1),
  (20, 24, 1),
  (22, 24, None)
]


class PuzzleLoader:

  EASY_7x7 = 7, 7, _easy_7x7
  HARD_7x7 = 7, 7, _hard_7x7
  EASY_10x10 = 10, 10, _easy_10x10
  HARD_10x10 = 10, 10, _hard_10x10
  HARD_25x25 = 25, 25, _hard_25x25

  @staticmethod
  def load_puzzle(store, puzzle):
    store.reset_board(puzzle[0], puzzle[1])
    for cell in puzzle[2]:
      store.set_cell_state(cell[0], cell[1], board.CellState.WALL)
      store.set_cell_count(cell[0], cell[1], cell[2])
